// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Note: After every change on models, run the cmd: "prisma generate" to update the Prisma Client.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Lead {
  id Int @id @default(autoincrement())
  email String @unique
  createdAt DateTime @default(now())
}

model AccountOriginType {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  origin String @db.VarChar(255) @unique

  accounts UserAccount[]
}

model AccountRoleType {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  role String @db.VarChar(255) @unique

  accounts UserAccount[]
}

model UserAccount {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive Boolean @default(true)
  email String? @db.VarChar(255) @unique
  password String? @db.VarChar(255)
  
  roleType AccountRoleType @relation(fields: [roleTypeId], references: [id])
  roleTypeId Int

  originType AccountOriginType @relation(fields: [originTypeId], references: [id])
  originTypeId Int

  tokens Token[]

  profile Profile?
}

model Token {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime
  uid String @db.VarChar(255) @unique @default(uuid())

  userAccount UserAccount @relation(fields: [userAccountId], references: [id])
  userAccountId Int

  tokenType TokenType @relation(fields: [tokenTypeId], references: [id])
  tokenTypeId Int
}

model TokenType {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  type String @db.VarChar(255)

  tokens Token[]
}

model ImageType {
  id Int @id @default(autoincrement())
  type String @db.VarChar(255) @unique

  images Image[]
}

model Image {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  publicId String @db.VarChar(255)
  width Int
  height Int
  imageUrl String @db.VarChar(255)

  imageTypeId Int
  imageType ImageType @relation(fields: [imageTypeId], references: [id])

  profileImages ProfileImage[]
}

model Profile {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  nickname String @db.VarChar(255)
  description String @db.VarChar(255)

  userAccountId Int @unique
  userAccount UserAccount @relation(fields: [userAccountId], references: [id])

  profileImages ProfileImage[]

  slug String? @db.VarChar(255) @default(uuid())

  business Business?
  consumer Consumer?
}

model ProfileImage {
  id Int @id @default(autoincrement())

  profileId Int
  profile Profile @relation(fields: [profileId], references: [id])

  imageId Int
  image Image @relation(fields: [imageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model BusinessType {
  id Int @id @default(autoincrement())
  type String @unique

  businesses Business[]
}

model Business {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cnpj String @db.VarChar(18)
  brand String @db.VarChar(255)

  businessTypeId Int
  businessType BusinessType @relation(fields: [businessTypeId], references: [id])

  profileId Int @unique
  profile Profile @relation(fields: [profileId], references: [id])
}

model Consumer {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cpf String @db.VarChar(14)

  profileId Int @unique
  profile Profile @relation(fields: [profileId], references: [id])
}

