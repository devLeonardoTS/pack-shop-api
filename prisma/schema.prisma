// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Note: After every change on models, run the cmd: "prisma generate" to update the Prisma Client.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Lead {
  id Int @id @default(autoincrement())
  email String @unique
  createdAt DateTime @default(now())
}

model AccountOriginType {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  origin String @db.VarChar(255) @unique

  accounts UserAccount[]
}

model AccountRoleType {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  role String @db.VarChar(255) @unique

  accounts UserAccount[]
}

model UserAccount {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive Boolean @default(true)
  email String? @db.VarChar(255) @unique
  password String? @db.VarChar(255)
  
  roleType AccountRoleType @relation(fields: [roleTypeId], references: [id])
  roleTypeId Int

  originType AccountOriginType @relation(fields: [originTypeId], references: [id])
  originTypeId Int

  tokens Token[]

  businessProfile BusinessProfile?
}

model Token {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime
  uid String @db.VarChar(255) @unique @default(uuid())

  userAccount UserAccount @relation(fields: [userAccountId], references: [id])
  userAccountId Int

  tokenType TokenType @relation(fields: [tokenTypeId], references: [id])
  tokenTypeId Int
}

model TokenType {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  type String @db.VarChar(255)

  tokens Token[]
}

model BusinessProfile {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  profileSlug String @db.VarChar(255) @unique @default(uuid())
  brand String @db.VarChar(255)
  nickname String @db.VarChar(255)
  cnpj String @db.VarChar(14) @unique
  pictureUrl String @db.VarChar(255)

  description String? @db.Text

  userAccount UserAccount @relation(fields: [userAccountId], references: [id])
  userAccountId Int @unique
}