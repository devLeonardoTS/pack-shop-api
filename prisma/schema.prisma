// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Note: After every change on models, run the cmd: "prisma generate" to update the Prisma Client.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Lead {
  id Int @id @default(autoincrement())
  email String @unique
  createdAt DateTime @default(now())
}

model AccountOriginType {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  origin String @db.VarChar(255) @unique

  accounts UserAccount[]
}

model AccountRoleType {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  role String @db.VarChar(255) @unique

  accounts UserAccount[]
}

model UserAccount {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isActive Boolean @default(true)
  isConfirmed Boolean @default(false)

  email String? @db.VarChar(255) @unique
  password String? @db.VarChar(255)
  
  roleType AccountRoleType @relation(fields: [roleTypeId], references: [id])
  roleTypeId Int

  originType AccountOriginType @relation(fields: [originTypeId], references: [id])
  originTypeId Int

  tokens Token[]

  profile Profile?
}

model Token {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime
  uid String @db.VarChar(255) @unique @default(uuid())

  userAccount UserAccount @relation(fields: [userAccountId], references: [id])
  userAccountId Int

  tokenType TokenType @relation(fields: [tokenTypeId], references: [id])
  tokenTypeId Int
}

model TokenType {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  type String @db.VarChar(255)

  tokens Token[]
}

model ImageType {
  id Int @id @default(autoincrement())
  type String @db.VarChar(255) @unique

  images Image[]
}

model Image {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  publicId String @db.VarChar(255)
  width Int
  height Int
  imageUrl String @db.VarChar(255)

  imageTypeId Int
  imageType ImageType @relation(fields: [imageTypeId], references: [id])

  profileImages ProfileImage[]
  productImages ProductImage[]
}

model Profile {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isSubscribedToOffers Boolean 

  userAccountId Int @unique
  userAccount UserAccount @relation(fields: [userAccountId], references: [id])

  slug String? @db.VarChar(255) @default(uuid())

  business Business?
  consumer Consumer?

  addresses Address[]
  phones Phone[]
  profileImages ProfileImage[]
}

model ProfileImage {
  id Int @id @default(autoincrement())

  profileId Int
  profile Profile @relation(fields: [profileId], references: [id])

  imageId Int
  image Image @relation(fields: [imageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model BusinessType {
  id Int @id @default(autoincrement())
  type String @unique

  businesses Business[]
}

model PhoneType {
  id Int @id @default(autoincrement())
  type String @unique

  phones Phone[]
}

model Phone {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  number String @db.VarChar(15)

  isPrimary Boolean @default(false)

  phoneTypeId Int
  phoneType PhoneType @relation(fields: [phoneTypeId], references: [id])

  profileId Int
  profile Profile @relation(fields: [profileId], references: [id])
}

model Business {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cnpj String @db.VarChar(18) @unique

  razaoSocial String @db.VarChar(255)
  nomeFantasia String @db.VarChar(255)
  inscricaoEstadual String @db.VarChar(14)
  inscricaoMunicipal String @db.VarChar(15)
  dataAbertura DateTime

  businessTypeId Int
  businessType BusinessType @relation(fields: [businessTypeId], references: [id])

  profileId Int @unique
  profile Profile @relation(fields: [profileId], references: [id])

  businessOwner BusinessOwner? 

  products Product[]
}

model BusinessOwner {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cpf String @db.VarChar() @unique

  fullName String @db.VarChar(255)

  businessId Int @unique
  business Business @relation(fields: [businessId], references: [id])
}

model Consumer {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  cpf String @db.VarChar(14) @unique

  fullName String @db.VarChar(255)
  birthDate DateTime @db.Date

  socialName String? @db.VarChar(255)

  profileId Int @unique
  profile Profile @relation(fields: [profileId], references: [id])
}

model Address {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cep String @db.VarChar(255)
  logradouro String @db.VarChar(255)
  numero String @db.VarChar(255)
  complemento String @db.VarChar(255)
  bairro String @db.VarChar(255)
  cidade String @db.VarChar(255)
  estado String @db.VarChar(255)
  pais String @db.VarChar(255)

  isPrimary Boolean @default(true)

  title String @db.VarChar(255)
  description String @db.VarChar(255)

  profileId Int
  profile Profile @relation(fields: [profileId], references: [id])
}

model Tag {
  id Int @id @default(autoincrement())
  name String @unique

  hits Int @default(0)

  productTags ProductTag[]
}

model Category {
  id Int @id @default(autoincrement())
  name String @unique

  productCategories ProductCategory[]
}

model ProductType {
  id Int @id @default(autoincrement())
  type String @unique

  products Product[]
}

model Product {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sku String @unique @db.VarChar(255)
  name String @db.VarChar(255)
  description String @db.Text()
  brand String @db.VarChar(255)
  price Decimal @db.Decimal(10, 2)
  stock Int @db.Integer() 
  
  weightKg Decimal @db.Decimal(10, 2)

  lengthCm Decimal @db.Decimal(10, 2)
  heightCm Decimal @db.Decimal(10, 2)
  widthCm Decimal @db.Decimal(10, 2)

  manufacturedAt DateTime
  expiresAt DateTime
  
  isAvailable Boolean @default(false)

  slug String? @db.VarChar(255) @default(uuid())

  productTypeId Int
  productType ProductType @relation(fields: [productTypeId], references: [id])

  businessId Int
  business Business @relation(fields: [businessId], references: [id]) 

  productImages ProductImage[]
  productCategories ProductCategory[]
  productTags ProductTag[]

}

model ProductCategory {
  id Int @id @default(autoincrement())

  productId Int
  product Product @relation(fields: [productId], references: [id])

  categoryId Int
  category Category @relation(fields: [categoryId], references: [id])
}

model ProductImage {
  id Int @id @default(autoincrement())

  productId Int
  product Product @relation(fields: [productId], references: [id])

  imageId Int
  image Image @relation(fields: [imageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model ProductTag {
  id Int @id @default(autoincrement())

  productId Int
  product Product @relation(fields: [productId], references: [id])

  tagId Int
  tag Tag @relation(fields: [tagId], references: [id])
}